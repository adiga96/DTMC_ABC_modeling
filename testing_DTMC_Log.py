# Testing MArkov Chain with Log Function

# Filtering the data for hospitalized observed data
a = data_copy[data_copy['hospitalized'] != 0]
observed_values = a['hospitalized'][:27].tolist()
#----------------------------------------------------------------------
# Testing 1
testing_simulation = exp_simulation(max_rate, min_rate, 1000, 100, 27) #check functions.py
testing_KStest = KS_TEST(testing_simulation,observed_values)
total_accepted_values = len(testing_KStest)
total_accepted_values
#----------------------------------------------------------------------
# Testing 2 : Markov Chain Transition probabilities generator

row_1 = Trans_Matrix(0.80,0.90)
row_2 = Trans_Matrix(0.70,0.80)
row_3 = [0, 0,  1,  0]
row_4 = [0, 0,  0,  1]

Testing_TRANS_PROB  = np.matrix([row_1,row_2,row_3,row_4])
Testing_TRANS_PROB 

#----------------------------------------------------------------------
# NHC_increasing = [[value1, value2, value3, ....]
# initial values = [H, C, R, D]
# DTMC_predicted_values = []

def testing_DTMC_log_increasing(TP_Matrix,NHC_List):

    '''
    args:
        TP_Matrix (NumPy Matrix) = Transition Probability Matrix
        NHC_List (List) = Generated by Log Function

    returns:
        DTMC_predicted_values (NumPy array) = Predicted values, Transitions Probability Matrix

    '''

    DTMC_predicted_values = []
    
    DTMC_sub_array = [] # [Array[*Array*]]
    for i in range(4):
        DTMC_sub_array.append([])     #creating list inside list

    # print(type(NHC_List))
    # print(type(TP_Matrix))
    # print(len(NHC_List))

    for i in range(len(NHC_List)):
         
        current_state = np.matrix([NHC_List[i], 0, 0, 0]) #Taking values from the Log function NHC List
        # print(type(current_state))
        # print(type(TP_Matrix))
        new_state = current_state * TP_Matrix   #Markov Chain
        new_state = np.squeeze(np.asarray(new_state))   

        #append all values into a sub array
        DTMC_sub_array[0].append(new_state[0])
        DTMC_sub_array[1].append(new_state[1])
        DTMC_sub_array[2].append(new_state[2])
        DTMC_sub_array[3].append(new_state[3])
        
    # Subarrays and respective Transition Probabilities merged
    TP_Matrix = np.squeeze(np.asarray(TP_Matrix))
    DTMC_sub_array.append(TP_Matrix)

    # Merged Subarray to the main array (Accessed by Mainarray [i][j])
    DTMC_predicted_values.append(DTMC_sub_array)
        
    return DTMC_predicted_values

# Testing 2 : Markov Chain Transition probabilities generator

row_1 = Trans_Matrix(0.80,0.90)
row_2 = Trans_Matrix(0.70,0.80)
row_3 = [0, 0,  1,  0]
row_4 = [0, 0,  0,  1]

Testing_TRANS_PROB  = np.matrix([row_1,row_2,row_3,row_4])
Testing_TRANS_PROB 
#----------------------------------------------------------------------

DTMC_testing_prediction = testing_DTMC_log_increasing(Testing_TRANS_PROB, testing_NHS_inc_ist)
plt.plot(DTMC_testing_prediction[0][0],color='green',label='Hospitalized')
plt.plot(DTMC_testing_prediction[0][1],color='red',label='Critical')
plt.plot(DTMC_testing_prediction[0][2],color='blue',label='Recovered')
plt.plot(DTMC_testing_prediction[0][3],color='black',label='Death')
plt.legend()
plt.rcParams['figure.figsize']= [20,6]
